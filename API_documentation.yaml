openapi: "3.0.0"
info:
  version: "1.0.0"
  title: People Registration API
  description: API for managing people and addresses registration

paths:
  /persons:
    get:
      tags:
        - Persons
      summary: List all registered persons
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "404":
          description: ID not found.
          content:
            text/plain:
              schema:
                type: string
                example: No Person with ID 1 was found.
    post:
      tags:
        - Persons
      summary: Create a new person
      requestBody:
        description: Person object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          description: CPF/CNPJ informed is already registered
          content:
            text/plain:
              schema:
                type: string
                example: CPF/CNPJ already registered.

  /persons/{id}:
    get:
      tags:
        - Persons
      summary: Get a person by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the person to retrieve
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: ID not found.
          content:
            text/plain:
              schema:
                type: string
                example: No Person with ID 1 was found.
        
    put:
      tags:
        - Persons
      summary: Update person.
      parameters:
        - name: id
          in: path
          description: ID of the person to update.
          required: true
          schema:
            type: integer
      requestBody:
        description: Person object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        '200':
          description: Person updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        "404":
          description: ID not found.
          content:
            text/plain:
              schema:
                type: string
                example: No Person with ID 1 was found.
                
    delete:
      tags:
        - Persons
      summary: Delete person.
      parameters:
        - name: id
          in: path
          description: ID of the person to delete.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Person deleted successfully.
        "404":
          description: ID not found.
          content:
            text/plain:
              schema:
                type: string
                example: No Person with ID 1 was found.

  /addresses:
    get:
      tags:
        - Addresses
      summary: List all registered addresses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"

    post:
      tags:
        - Addresses
      summary: Create a new address
      requestBody:
        description: Address object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressOfCreateOrUpdated"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"

  /addresses/byPersonId/{personId}:
    get:
      tags:
        - Addresses
      summary: Get all addresses for a person by their ID
      parameters:
        - in: path
          name: personId
          required: true
          schema:
            type: integer
          description: ID of the person whose addresses will be retrieved
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        "404":
          description: No addresses were found to ID an informed person
          content:
            text/plain:
              schema:
                type: string
                example: No Address was found to Person ID 1.
  
  /addresses/{id}:
    get:
      tags:
        - Addresses
      summary: Get address by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Address ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        "404":
          description: ID not found.
          content:
            text/plain:
              schema:
                type: string
                example: No Address with ID 1 was found.

    put:
        tags:
          - Addresses
        summary: Update address.
        parameters:
          - name: id
            in: path
            description: ID of the address to update.
            required: true
            schema:
              type: integer
        requestBody:
          description: Address object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressOfCreateOrUpdated"
        responses:
          '200':
            description: Address updated successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Address'
          "404":
            description: ID not found.
            content:
              text/plain:
                schema:
                  type: string
                  example: No Person with ID 1 was found.
                  
    delete:
      tags:
        - Addresses
      summary: Delete address.
      parameters:
        - name: id
          in: path
          description: ID of the address to delete.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Address deleted successfully.
        "404":
          description: ID not found.
          content:
            text/plain:
              schema:
                type: string
                example: No Address with ID 1 was found.

components:
  schemas:
    Person:
      type: object
      required:
        - nameCompany
        - cpfCnpj
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nameCompany:
          type: string
          example: Name of person
        email:
          type: string
          example: "email@email.com.br"
        cpfCnpj:
          type: string
          example: 123.456.789-00

    Address:
      type: object
      required:
        - address
        - zipCode
        - number
        - city
        - person
      properties:
        id:
          type: integer
          format: int64
          example: 1
        address:
          type: string
          example: Address of person
        zipCode:
          type: string
          example: 12345-678
        number:
          type: integer
          format: int64
          example: 123
        city:
          type: string
          example: City
        person:
          $ref: "#/components/schemas/Person"

    AddressOfCreateOrUpdated:
      type: object
      required:
        - address
        - zipCode
        - number
        - city
        - person
      properties:
        id:
          type: integer
          format: int64
          example: 1
        address:
          type: string
          example: Address of person
        zipCode:
          type: string
          example: 12345-678
        number:
          type: integer
          format: int64
          example: 123
        city:
          type: string
          example: City
        person:
          $ref: "#/components/schemas/PersonOfPut"

    PersonOfPut:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 1